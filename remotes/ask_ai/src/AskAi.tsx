// remotes/ask_ai/src/AskAi.tsx
import React, { useEffect } from 'react';
import { makeStyles } from '@fluentui/react-components';
import { useChatSessionStore, useChatHistoryStore } from '@arcfusion/store';
import { InitialView, ChatLog, ChatInputBar } from '@arcfusion/ui';

const useStyles = makeStyles({
  root: {
    display: 'flex',
    flexDirection: 'column',
    width: '100%',
    height: '100%',
  },
});

interface AskAiProps {
  navigate: (path: string, options?: { replace?: boolean }) => void;
  chatId?: string;
}

export default function AskAi({ navigate, chatId }: AskAiProps) {
  const styles = useStyles();
  const {
    blocks,
    status, // <--- 1. ‡∏î‡∏∂‡∏á status ‡∏°‡∏≤‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô
    currentAiTask,
    threadId,
    loadConversation,
    sendMessage: sendMessageFromStore,
    clearChat,
    updateLastMessageWithData,
  } = useChatSessionStore();
  const { fetchConversations: refreshHistory } = useChatHistoryStore();

  const isStreaming = status === 'streaming';

  // üëá 2. ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç useEffect ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡∏ó‡∏µ‡πà‡∏ô‡∏µ‡πà
  useEffect(() => {
    // ‡∏ñ‡πâ‡∏≤‡∏Å‡∏≥‡∏•‡∏±‡∏á stream ‡∏≠‡∏¢‡∏π‡πà ‡πÑ‡∏°‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏ó‡∏≥‡∏≠‡∏∞‡πÑ‡∏£‡∏ó‡∏±‡πâ‡∏á‡∏™‡∏¥‡πâ‡∏ô ‡∏õ‡∏•‡πà‡∏≠‡∏¢‡πÉ‡∏´‡πâ stream ‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡πÑ‡∏õ
    if (status === 'streaming') {
      return;
    }

    // ‡∏ñ‡πâ‡∏≤ URL ‡∏°‡∏µ chatId ‡πÅ‡∏•‡∏∞‡πÑ‡∏°‡πà‡∏ï‡∏£‡∏á‡∏Å‡∏±‡∏ö threadId ‡πÉ‡∏ô store ‡πÉ‡∏´‡πâ‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÅ‡∏ä‡∏ó‡∏ô‡∏±‡πâ‡∏ô
    if (chatId && chatId !== threadId) {
      loadConversation(chatId);
    }
    // ‡∏ñ‡πâ‡∏≤ URL ‡πÑ‡∏°‡πà‡∏°‡∏µ chatId ‡πÅ‡∏ï‡πà‡πÉ‡∏ô store ‡∏¢‡∏±‡∏á‡∏°‡∏µ threadId ‡∏Ç‡∏≠‡∏á‡πÅ‡∏ä‡∏ó‡πÄ‡∏Å‡πà‡∏≤‡∏Ñ‡πâ‡∏≤‡∏á‡∏≠‡∏¢‡∏π‡πà ‡πÉ‡∏´‡πâ‡∏•‡πâ‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
    else if (!chatId && threadId) {
      clearChat();
    }
  }, [chatId, threadId, status, loadConversation, clearChat]); // <--- 3. ‡πÄ‡∏û‡∏¥‡πà‡∏° status ‡πÉ‡∏ô dependency array

  const handleSendMessage = (text: string) => {
    const currentThreadId = useChatSessionStore.getState().threadId;

    sendMessageFromStore(text, currentThreadId).then((newThreadId) => {
      if (!currentThreadId && newThreadId) {
        navigate(`/ask_ai/${newThreadId}`, { replace: true });
        refreshHistory();
      }
      if (newThreadId) {
        updateLastMessageWithData(newThreadId);
      }
    });
  };

  return (
    <div className={styles.root}>
      {blocks.length === 0 && !isStreaming ? (
        <InitialView onSuggestionClick={handleSendMessage} />
      ) : (
        <ChatLog blocks={blocks} status={status} currentAiTask={currentAiTask} />
      )}
      <ChatInputBar onSendMessage={handleSendMessage} isStreaming={isStreaming} />
    </div>
  );
}
